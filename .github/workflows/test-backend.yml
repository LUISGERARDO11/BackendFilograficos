# This GitHub Actions workflow is set up to run backend tests when code changes
# are pushed to the `develop` or `main` branches, or when a pull request 
# is opened targeting those branches. 

#Here's a breakdown of what each part of the workflow does:
name: Run Backend Tests

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Use Node.js 20
        uses: actions/setup-node@v6
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env.test from secrets
        run: |
          mkdir -p tests
          {
            echo "NODE_ENV=${{ secrets.NODE_ENV }}"
            echo "BASE_URL=${{ secrets.BASE_URL }}"
            echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}"
            echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}"
            echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}"
            echo "COMPANY_EMAIL=${{ secrets.COMPANY_EMAIL }}"
            echo "CORS_WHITELIST=${{ secrets.CORS_WHITELIST }}"
            echo "CSRF_SECRET_KEY=${{ secrets.CSRF_SECRET_KEY }}"
            echo "DB_HOST=${{ secrets.DB_HOST }}"
            echo "DB_NAME=${{ secrets.DB_NAME }}"
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
            echo "DB_PORT=${{ secrets.DB_PORT }}"
            echo "DB_USER=${{ secrets.DB_USER }}"
            echo "EMAIL_FROM=${{ secrets.EMAIL_FROM }}"
            echo "FIREBASE_SERVICE_ACCOUNT=${{ secrets.FIREBASE_SERVICE_ACCOUNT }}"
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}"
            echo "RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}"
            echo "SMTP_HOST=${{ secrets.SMTP_HOST }}"
            echo "SMTP_PASS=${{ secrets.SMTP_PASS }}"
            echo "SMTP_PORT=${{ secrets.SMTP_PORT }}"
            echo "SMTP_REJECT_UNAUTHORIZED=${{ secrets.SMTP_REJECT_UNAUTHORIZED }}"
            echo "SMTP_SECURE=${{ secrets.SMTP_SECURE }}"
            echo "SMTP_USER=${{ secrets.SMTP_USER }}"
            echo "URL_FRONTEND_ORDER_DETAIL=${{ secrets.URL_FRONTEND_ORDER_DETAIL }}"
            echo "VAPID_PRIVATE_KEY=${{ secrets.VAPID_PRIVATE_KEY }}"
            echo "VAPID_PUBLIC_KEY=${{ secrets.VAPID_PUBLIC_KEY }}"
            echo "VAPID_SUBJECT=${{ secrets.VAPID_SUBJECT }}"
          } > tests/.env.test

          # Manejo especial del certificado (multilínea)
          printf "%s\n" "DB_SSL_CA=${{ secrets.DB_SSL_CA }}" >> tests/.env.test

      - name: Verify .env.test created
        run: cat tests/.env.test | grep NODE_ENV || echo "env file created"
        # Esto solo muestra la primera línea, no revela secretos

      - name: Run Jest tests
        env:
          NODE_ENV: test
        run: npm test

      - name: Upload coverage report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: tests/coverage