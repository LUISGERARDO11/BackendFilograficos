# This GitHub Actions workflow is set up to run backend tests when code changes
# are pushed to the `develop` or `main` branches, or when a pull request 
# is opened targeting those branches. 
name: Run Backend Tests

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Use Node.js 22
        uses: actions/setup-node@v6
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # --- PASO CORREGIDO PARA CREAR .ENV.TEST (DB y SSL) ---
      # Se usa 'printf %b' para manejar correctamente las nuevas líneas del certificado.
      # Se usa el comando 'echo' separado para otras variables de DB.
      - name: Create .env.test for DB and SSL config
        shell: bash
        run: |
          mkdir -p tests
          DB_FILE="tests/.env.test"
          
          # 1. Escribir variables de DB simples (sin saltos de línea)
          cat <<EOF > "$DB_FILE"
          DB_HOST=${{ secrets.DB_HOST }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          EOF
          
          # 2. Manejo especial para el certificado DB_SSL_CA (con saltos de línea)
          # NOTA CLAVE: El valor del secret se encierra en comillas simples.
          # Esto evita que el shell intente ejecutar cada línea del certificado como un comando.
          printf "DB_SSL_CA='%s'\n" '${{ secrets.DB_SSL_CA }}' >> "$DB_FILE"


      - name: Run Jest tests
        # Inyectamos el resto de variables directamente, incluyendo FIREBASE_SERVICE_ACCOUNT.
        env:
          # --- Variables de Entorno del Proyecto ---
          NODE_ENV: test
          BASE_URL: ${{ secrets.BASE_URL }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          COMPANY_EMAIL: ${{ secrets.COMPANY_EMAIL }}
          CORS_WHITELIST: ${{ secrets.CORS_WHITELIST }}
          CSRF_SECRET_KEY: ${{ secrets.CSRF_SECRET_KEY }}
          
          # --- Variables de Servicios (Incluyendo Firebase) ---
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          
          # --- Variables SMTP ---
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_REJECT_UNAUTHORIZED: ${{ secrets.SMTP_REJECT_UNAUTHORIZED }}
          SMTP_SECURE: ${{ secrets.SMTP_SECURE }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          
          # --- Otras Variables ---
          URL_FRONTEND_ORDER_DETAIL: ${{ secrets.URL_FRONTEND_ORDER_DETAIL }}
          VAPID_PRIVATE_KEY: ${{ secrets.VAPID_PRIVATE_KEY }}
          VAPID_PUBLIC_KEY: ${{ secrets.VAPID_PUBLIC_KEY }}
          VAPID_SUBJECT: ${{ secrets.VAPID_SUBJECT }}
          
        run: npm test

      - name: Upload coverage report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: tests/coverage