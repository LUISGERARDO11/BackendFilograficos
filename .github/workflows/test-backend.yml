name: Backend CI/CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Use Node.js 22
        uses: actions/setup-node@v6
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env.test for DB and SSL config
        shell: bash
        run: |
          mkdir -p tests
          DB_FILE="tests/.env.test"
          cat <<EOF > "$DB_FILE"
          DB_HOST=${{ secrets.DB_HOST }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          EOF
          printf "DB_SSL_CA='%s'\n" '${{ secrets.DB_SSL_CA }}' >> "$DB_FILE"

      - name: Run Jest tests
        env:
          NODE_ENV: test
          BASE_URL: ${{ secrets.BASE_URL }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          COMPANY_EMAIL: ${{ secrets.COMPANY_EMAIL }}
          CORS_WHITELIST: ${{ secrets.CORS_WHITELIST }}
          CSRF_SECRET_KEY: ${{ secrets.CSRF_SECRET_KEY }}

          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}

          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_REJECT_UNAUTHORIZED: ${{ secrets.SMTP_REJECT_UNAUTHORIZED }}
          SMTP_SECURE: ${{ secrets.SMTP_SECURE }}
          SMTP_USER: ${{ secrets.SMTP_USER }}

          URL_FRONTEND_ORDER_DETAIL: ${{ secrets.URL_FRONTEND_ORDER_DETAIL }}
          VAPID_PRIVATE_KEY: ${{ secrets.VAPID_PRIVATE_KEY }}
          VAPID_PUBLIC_KEY: ${{ secrets.VAPID_PUBLIC_KEY }}
          VAPID_SUBJECT: ${{ secrets.VAPID_SUBJECT }}
        run: npm test -- --json --outputFile=tests/jest-results.json

      - name: Generate Test Summary
        if: always()
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          RESULTS_FILE=tests/jest-results.json
          if [ -f "$RESULTS_FILE" ]; then
            PASSED=$(jq .numPassedTests "$RESULTS_FILE")
            FAILED=$(jq .numFailedTests "$RESULTS_FILE")
            TOTAL=$(jq .numTotalTests "$RESULTS_FILE")
            TIME=$(jq .testResults[0].perfStats.runtime "$RESULTS_FILE" | awk '{printf "%.1f", $1/1000}')
            SUMMARY_ICON="✅"
            if [ "$FAILED" -gt 0 ]; then SUMMARY_ICON="❌"; fi
            echo "$SUMMARY_ICON $PASSED passed — $FAILED failed — $TOTAL total — duration: $TIME s" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No se encontró reporte JSON" >> $GITHUB_STEP_SUMMARY
          fi

  deploy:
    name: Deploy to Vercel (only if tests pass in main)
    needs: test
    if: github.ref == 'refs/heads/main' && needs.test.result == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install dependencies
        run: npm ci

      - name: Link Vercel Project
        run: |
          npx vercel link \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --yes

      - name: Deploy to Production
        run: |
          npx vercel deploy --prod \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --confirm
